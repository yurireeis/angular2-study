- angular2 e um framework totalmente diferente do angularjs (porem alguns conceitos sao mantidos)
- uma parceria entre google / microsoft
- open source
- criado para que o angular pudesse utilizar padroes web como webcomponents e shadow dom
- trabalha sob o conceito de SPA
- construido com TS

blocos principais (framework):

- componentes
- diretivas
- roteamento
- serviços
- template
- metadata
- data binding
- injeçao de dependencia

overview:

1) componentes:

	- template
	- metadata (que permite o processamento das classes)
	- data-binding
	- comportamento da VIEW
	- e uma diretiva (com template)
	- pra quem utiliza o angularjs: e a junçao do controller + scope + template
	- aplicacao orientada a componente
	- tudo o que temos na aplicacao e um componente
	- o componente "pai" pode receber outros componentes

2) router:

	- responsavel pelo roteamento na aplicacao (navegacao)

3) diretiva:

	- responsavel por modificar elementos dom e/ou suas diretivas

ANGULAR-CLI:

	- criando um projeto: ng new {nomeDoProjeto} (instala o angular2 com todas as suas dependencias)
	- dentro da pasta do projeto: ng serve (vai servir o projeto)
	- setup inicial: module, component (principal), html (view), css
	- ng serve ja vem com live reload ativo
	- padrao do styleguide: {?[-]+} (para criaçao dos arquivos)
	- comando para criar um componente: ng g c {nomeDoComponente} (ele ira criar
		um diretorio e um componente com o nome)
		- o comando acima ira criar alguns arquivos: o css, html, spec (para
			implementacao de testes unitarios da classe do componente) e o componente

BABEL:

	- e um transpiler

	TYPESCRIPT:

	- pode ser utilizado em qualquer projeto typescript
	- utiliza transpiler (converte ts em js puro).
	- utilizado com reactjs, angular (ambos usam es2015)

MODULOS:

	- organiza/modulariza a aplicacao
	- escolha do que expor ao longo da aplicacao
	- AppModule geralmente e o modulo raiz da aplicacao
	- FormsModule e quem representa o ngModel do AngularJS
	- METADADOS:
		- DECLARATIONS: ondem devem ser listados todos os componentes, diretivas e
			pipes a serem usados
		- IMPORTS: outros modulos que desejamos utilizar nesse modulo
		- PROVIDERS: onde colocamos os servicos a serem utilizados nesse modulo
		- BOOTSTRAP: SOMENTE encontrado no principal modulo para informar qual sera
			o componente principal (container/viewport) da aplicacao
			- modulos de funcionalidades NAO contem o metadado bootstrap
			- o modulo de funcionalidade NAO contem o BrowserModule e sim o CommonModule
			- o CommonModule tem as diretivas/pipes mais comuns
			- para criar um componente dentro de um modulo de funcionalidade, basta usar
			o comando do angular-cli referenciado o modulo/nome do componente
			ex.: ng g c cursos/cursos
		- EXPORTS: serve para exportar determinados componentes/diretivas/pipes para
			outros modulos.
		- quando voce exporta um determinado modulo e o importa em um outro modulo,
			automaticamente voce esta permitindo que aquilo que esta exposto seja
			utilizado dentro do que esta declarado no modulo que o importou
	- a ideia de utilizar modulos nos projetos e controlar o que um modulo pode ver
		e o que outro modulo nao pode ver (alem de organizar)

TEMPLATES:

	- assim como podemos criar os componentes (que geram seletores), podemos tambem
		gerar templates html
	- o conceito de interpolacao continua (assim como ja existia no angularjs),
		usando da mesma conotacao {{}}
	- template inline so deve ser utilizado caso o seu codigo tenha ate 03 linhas
		(styleguide do angular)

SERVICES:

	- o codigo que deve estar dentro do componente e apenas de interacao com o
		usuario. Caso seja necessario receber alguma informaçao, devemos utilizar
		um service
	- primariamente nos utilizamos as classes de servico para realizar a conexao
		com o servidor (normalmente atraves de chamadas http)
	- Dependency Injection (DI): existente em varios frameworks. E a capacidade de
		fornecimento de uma instancia de uma classe de maneira automatica (abstraindo
		alguns passos)
		- sempre que nos quisermos realizar a injeçao de dependencia, e necessario
			deixar explicito que determinada classe de servico pode fazer isso, atraves
			do decorator @Injectable()
		- no Angular, a injecao de dependencia e feita atraves de construtor
		- atraves da injeçao de dependencia, basta declarar o serviço no construtor
			como private que ele ja estara disponivel para utilizacao dentro da classe

HINTS:

	- atom (plugins para verificar)
		- typescript snippets: adiciona intelisense para criacao de routes, html,
			ngFor, modules, components, etc [...]
		- linter: mostra error em tempo de execuçao
		- pigments: no momento da criacao da cor, ele simplemente apresenta a cor em
			tempo real dependendo do hexadecimal descrito

INTERPOLATION (DATA BINDING):

	- existem quatro formas possiveis:
		- INTERPOLATION: pegar o valor de um atributo/metodo e apresentar no template
		- PROPERTY BINDING: conseguimos ter a saida de um atributo do componente para o template
			- no property-binding, temos tres formas para realizar a tarefa
				- 1) usando a interpolacao tradicional ex.: <img src="{{ urlImage }}">
				- 2) passando colchetes em volta da propriedade (removendo a necessidade
				- 3) o padrao no angular (mas pouco utilizado) e bind-* ex.: bind-src="teste"
				naquele ponto de ter que passar a dupla chave) ex.: <img [src]="urlImage">
				- obs.: nao ha diferenca entre a primeira e a segunda aplicacao, porem a
				segunda e considerada um syntax sugar
		- EVENTO: clique no botao, foco em um campo
		- TWO-WAY DATA BINDING: informaçao transita do componente pro template e vice-versa
	- para realizar a interpolacao, usar: {{ nome_da_variavel }}
	- o angular tambem consegue resolver expressoes dentro da interpolacao ex.: {{ 1 + 1 }}
	- essas expressoes tambem podem ser booleanas
	- e possivel criar uma variavel diretamente no escopo (dentro de um html),
		utilizando o # ex.: <select #class></select>
	- para utilizar metodos como click, change, basta passar o parenteses entre o
		mesmo (e chamar o metodo de evento) ex.: <select (change)="youMethodGoesHere"></select>

CLASS E STYLE-BINDING:

	- para realizar o class binding, basta que seja utilizada a seguinte sintaxe:
		[class.${nome_da_classe}]="${condicao_para_que_seja_setado}"
	- outra forma (mais simples) de realizar essa tarefa e fazer o style binding
		atraves de interpolacao ex.: <div class="alert {{classe}}"></div>
	- mais uma alternativa e fazer as mesmas açoes citadas acima, so que para o
		style (inline) ex.: [style.${nome_da_propriedade}]="${condicao_para_que_seja_setado} ? ${valor_da_propriedade}"
	- o que ocorre por "debaixo dos panos" quando se seta o [] e o repasse da
		diretiva bind- ex.: bind-class

EVENT BINDING:

	- escutar eventos e executar alguma rotina
	- w3c e mdn (pagina) para saber quais eventos podem ser ouvidos.
	- property bind utilizamos colchetes [] para bind de atributo, no evento
		utilizamos parenteses ()
	- keyup: evento quando terminamos de digitar uma tecla. deve ser passado no
		parametro da funcao mapeada para esse tipo de evento a variavel $event
	- para os eventos que tambem tem subpropriedades, e possivel fazer a chamada
		diretamente do template (frontend) ex.: (keyup.enter). Isso e bom para, por
		exemplo, a acao de salvar quando disparado um enter em um campo.
	- outra boa pratica para salvar valores de input e utilizar a variavel com #
		no elemento de input no html, mapeando a passagem de valor do mesmo para o
		metodo disparado no evento
	- velhos conhecidos tais como: mouseover, mouseout... tambem podem ser
		utilizadas nessa modalidade.
	- por "debaixo dos panos", o que ocorre quando sao setados os parenteses em
		uma diretiva de evento e o on- ex.: on-click.

	TWO-WAY DATA BINDING

	- quando se utiliza um valor com os {{}}, a direcao e apenas do componente
		para o template.
	- quando se utiliza [propriedade]="valor", a direcao tambem e do componente
		para o template.
	- quando se usa o parenteses para invocar um evento, a direcao e do template
		para o componente.
	- porem, como sabemos, em alguns casos nos desejamos atualizar tanto o
		template quanto o componente. Isso e o two-way data binding.
	- a sintaxe para fazer o two-way data binding [(ngModel)]="${variavel}"
	-  o nome dessa sintaxe e banana-in-a-box, pois sem o ngModel fica parecido
	 	com uma banana na caixa ex.: [()]
		pois o colchete faz o bind da propriedade e o parenteses faz o bind do evento
	- sabendo da informacao anterior, por "debaixo dos panos" o que e setado na
		verdade e o bindon-ngModel.
	- o evento que e chamado (a titulo de curiosidade) quando o bind e feito com
		o parenteses e o nGmodelChange.
	- sempre lembrando que o modulo que for utilizar o ngModel devera importar o
		FormsModule, que faz parte do modulo forms do @angular.

INPUT/OUTPUT PROPERTIES:

	- para expor uma propriedade para um determinado elemento/seletor e necessario
		export utilizando o decorator @Input
	- o decorator Input faz parte do core do Angular
	- esse decorator devera ficar a esquerda da declaracao da variavel do atributo
		no componente ao qual ele ia ser recebido. ex.: @Input() nome: string;
	- assim como no angularjs, podemos setar externamente a variavel com um nome
		e internamente com outro nome. Isso e possivel ao se setar o nome passando
		uma string dentro do input. ex.: @Input('name') courseName: string;
	- outra forma de declarar as input properties e atraves do metadado do
		componente atraves de um array (obviamente sem esquecer de importar o Input
		do core do Angular). ex.: inputs: [courseName]
		- usando a abordagem acima, tambem e possivel expor externamente com outro
			nome utilizando os metadados. ex.: inputs: ['courseName:name']
	- uma input property tem objetivos diferentes de uma diretiva

LIFE-CICLE HOOKS:

	- ngOnChanges: antes e quando o valor do property-binding é utilizado
	- ngOnInit: quando o component é inicializado
	- ngDoCheck: a cada ciclo de verificação de mudanças
	- ngAfterContentInit: após inserir conteúdo externo na view (template)
	- ngAfterContentChecked: a cada verificação do conteúdo inserido
	- ngAfterViewChecked: a cada verificação do conteúdo/conteúdo filho
	- ngOnDestroy: quando o componente é destruído

		- quando um componente é destruído é sempre bom destruir as inscrições que realizamos em um 
		observable. para isso podemos usar o ngOnDestroy
		- o ngIf é um exemplo de chamada do onDestroy, pois ele remove o componente

ACESSO AO DOM/TEMPLATE COM VIEWCHILD:

	- o acesso não se restringe apenas ao elementos html, mas também podem ser acessados os 
	métodos/propriedades de um componente.
	- o decorator @ViewChild também faz parte do pacote @angular/core
	- deve ser passado como metadado/parâmetro ao ViewChild a variável que corresponde ao elemento 
	que será acessado.
	- o tipo do element ao ser referenciado pela ViewChild é o ElementRef
	- dentro do ElementRef nós teremos o NativeElement, que é a referência ao elemento propriamente dito.
	- para acessar diretamente o elemento, basta tipar a variável diretamente como ElementRef

ANGULAR-CLI:

	- a estrutura do angular-cli
		- cria toda a estrutura do projeto
		- inicializa um repositório git (além de fazer o commit inicial)
		- instala as dependências do node para se trabalhar com o angularx
		- cria arquivo de testes unitários, css, html e ts do component
		- cria modulos, classes, pipes e serviços
		- cria uma estrutura para testes e2e (protractor), unitários (jasmine/karma) e lint
		- também fornece comandos para build de produção
		- o angular-cli utiliza o ember-cli por debaixo dos panos
		- os DIRETÓRIOS da estrutura padrão são:
			- config: diretório para configurações de deploy/build/teste
			- dist: diretório que recebe o build da aplicação (fica no ignore)
			- e2e: diretório dos testes end-2-end
			- node_modules: onde ficam as dependências do projeto (e as instaladas via npm)
			- src: onde fica o código-fonte da aplicação
			- angular-cli.json: contem informações do projeto em si
			- tslint.json: configurações para o lint da aplicação
			- public: só contém um arquivo de ignore (pode ser usado por ex.: assets)
		- os ARQUIVOS da estrutura padrão são:
			- index.html: ponto de entrada do app
			- main.ts: faz bootstrap da aplicação
			- index.ts: faz o export de todos os módulos
			- polyfills: faz a transpilação do ES6 para o ES2008 (ES5), ou seja, são libs para 
			realizar essa tarefa
			- typings: arquivo gerenciador TS 
	- para utilizar no windows/linux, é necessário instalar o pacote angular-cli de maneira global 
	(ng i -g @angular/angular-cli)
	- requer o node >= 4
	- criando o projeto: ng new ${nome_do_projeto}
		- a criação do nome do projeto segue o mesmo padrão do javascript, ou seja, como exemplo, não é 
		possível criar um projeto com números no começo do nome
	- ng serve para servir o projeto
	- a diferença do ng init e do ng new é que o ng new cria a pasta do projeto, em contrapartida o ng init 
	inicializa o projeto em uma pasta já existente.
	- para criar componentes, serviços, pipes, nós vamos usar o ng generate (ng g) e o tipo da classe 
	desejado (component - s, service - s, pipe - p)
	- caso você crie um componente dentro de uma outra pasta, ele já inclui um modulo, arquivo css, arquivo ts 
	e template (html)
	- o bom de utilizar o angular-cli é que ele já mantém o projeto no styleguide do angular
	- também é possível criar classes, interfaces e enum com o angular-cli
	- a ferramenta angular-cli já tem suporte para pré-processadores
	- para usar um determinado pré-processador, você pode:
		- inicializar o projeto setando o pré-processador (ng new ${nome_do_projeto} --style=sass)
		- caso o projeto já esteja em andamento, também é possível setar (ng set defauls.styleExt scss)
			- para projetos em andamento, os arquivos anteriores em .css e mudar na mão.
			- para novos componentes em um projeto em andamento, ele já vai gerar no formato do 
			pré-processador automaticamente.
	- o arquivo pré-processado ficará na pasta dist
	- o angular-cli também fornece ferramentas para testes (unitários e e2e) e lint
		- ng lint para análise de código estático
			- ele fará a verificação se o seu código está de acordo com o styleguide, se tem espaços em 
			branco, ponto-e-vírgula a mais/menos, entre outras questões
			- o que roda por baixo é o jslint
		- ng test para testes unitários com o jasmine
			- o jasmine é orientado a comportamento (BDD), mas também pode ser utilizado com o TDD
			- testes unitários são bons porque permitem que você teste pequenas partes do seu código
			- no arquivo tests.ts está definido que os testes (caso disparado o comando ng test) devem 
			rodar em observação a todos os arquivos specs.ts do projeto.
			- o karma (plugin de testes) fará com que os testes unitários rodem em todos os navegadores
		- ng e2e para testes end-to-end/integração com o protractor
			- o arquivo para configuração dos testes end-to-end/integração é o app.e2e-spec, que fica 
			dentro do diretório e2e/src por padrão
		- dependencies/devDependencies
			- dependencies: necessária para rodar a aplicação
			- dev-dependencies: além das libs necessárias (que serão incluídas), libs necessárias para 
			desenvolver a aplicação

	ANGULAR-CLI (GERANDO O BUILD DE PRODUÇÃO)
		- ng build (gera o build de desenvolvimento)
			- vai ser gerado no dist
			- a diferença do build de produção para o de desenvolvimento é que o build de dev 
			NÃO é minificado e NEM ofuscado (uglify)
			- pelas razões acima, ainda é um código passível de debug
		- ng build --prod (gera o build para produção)
		- os arquivos, além de serem minificados e ofuscados, também recebem um número no nome 
		para controle de cache

	ANGULAR-CLI (INSTALANDO DEPENDÊNCIAS)
		- para instalação de bibliotecas terceiras, segue o padrão do angularjs
		- para injetar as dependências de fato, é necessário ir até o arquivo angular-cli.json e:
			- informar o caminho do(s) arquivo(s) JS na seção scripts.
			- informar o caminho do(s) arquivo(s) CSS na seção style.
		- dica: separar nas importações o que é do angular, o que é importação de terceiros e o que é próprio 
		com uma quebra de linha.
		- dica 2: para utilizar bibliotecas de terceiros, é necessário instalar os types da mesma (--save-dev)
		ex.: lodash - npm install --save lodash e npm install --save-dev @lodash/types

	DIRETIVAS
		- são exemplos de diretivas: ngFor, ngSubmit...
		- podemos dizer que os componentes são diretivas com templates 
		- existem dois tipos
			- ESTRUTURAIS: são utilizadas para modificar a estrutura do DOM (ngFor, ngIf...)
			- ATRIBUTOS: não modificam a estrutura do DOM, mas interagem o elemento ao qual foram aplicadas (ngClass, ngStyle...)
		- *ngIf:
			- é uma condicional que pode ser adicionada no template html
			- sempre que o ngIf for negativo, o elemento é destruído 
			- sempre cuidar com a questão de performance, pois a destruição dos elementos DOM tomam 
			muito da performance 
			- o hidden é um property-binding [hidden], ou seja, o elemento já está renderizado e apresentá-lo 
			ou não será uma questão de css
			- quando usar?
				- quando forem itens que envolverem segurança (ACL)
				- quando o elemento possui uma árvore no DOM muito extensa
		- *ngSwitch, *ngSwitchcase, *ngSwitchDefault
			- o ngSwitch vem como property binding para ficar escutando uma determinada variável 
			(que será usada para determinar o case selecionado)
			- o ngSwitchcase vem como uma diretiva em si com um determinado case ex.: 'home'
			- *ngSwitchDefault é usado para o case padrão
			- quando usar?
				- quando houver vários casos de if ~ else
		- *ngFor
			- permite que possamos iterar um array 
			- para usar o *ngFor é necessário instanciar uma variável seguido do array responsável por ela 
			ex.: let course of courses
			- também é possível passar o index da iteração instanciando uma variável na sequência para que 
			possa receber esse valor ex.: let course of courses, let i = index 
		- * e <template> (razão de uso)
			- quando o angular utiliza o *, na verdade ele está instanciando um template
			- quando renderiza o template acima citado, ele transforma a expressão com asterisco em um property binding
		- [ngClass]
			- essa diretiva é instanciada como um property-binding, pois o que ela faz é praticamente definir 
			através de um objeto qual será a classe css a ser renderizada